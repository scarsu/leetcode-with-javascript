/*
 * @lc app=leetcode.cn id=552 lang=javascript
 *
 * [552] 学生出勤记录 II
 *
 * https://leetcode-cn.com/problems/student-attendance-record-ii/description/
 *
 * algorithms
 * Hard (43.59%)
 * Likes:    166
 * Dislikes: 0
 * Total Accepted:    8.7K
 * Total Submissions: 17.1K
 * Testcase Example:  '2'
 *
 * 可以用字符串表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：
 * 
 * 'A'：Absent，缺勤
 * 'L'：Late，迟到
 * 'P'：Present，到场
 * 
 * 
 * 如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：
 * 
 * 
 * 按 总出勤 计，学生缺勤（'A'）严格 少于两天。
 * 学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（'L'）记录。
 * 
 * 
 * 给你一个整数 n ，表示出勤记录的长度（次数）。请你返回记录长度为 n 时，可能获得出勤奖励的记录情况 数量 。答案可能很大，所以返回对 10^9 +
 * 7 取余 的结果。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：n = 2
 * 输出：8
 * 解释：
 * 有 8 种长度为 2 的记录将被视为可奖励：
 * "PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL" 
 * 只有"AA"不会被视为可奖励，因为缺勤次数为 2 次（需要少于 2 次）。
 * 
 * 
 * 示例 2：
 * 
 * 
 * 输入：n = 1
 * 输出：3
 * 
 * 
 * 示例 3：
 * 
 * 
 * 输入：n = 10101
 * 输出：183236316
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * 1 <= n <= 10^5
 * 
 * 
 */

// @lc code=start
/**
 * @param {number} n
 * @return {number}
 */
var checkRecord = function(n) {
  // 从动态规划的角度考虑
  // 每天的结果 由以下三个状态决定：
      // 前一天的A数量
      // 前一天结尾连续的L数量
      // 当天的A、L、P值
  // 由上可以定义出状态
      // dp[i][j][k]:前i天(有j个A,结尾有k个连续的L)时 可获得奖励的出勤记录的数量
      // 0<=i<=n
      // 0<=j<=1
      // 0<=k<=2
  // 最终结果的状态
      // 由于第n天可以是A,L,P中的任意一个
      // 因此需要将三种情况值相加
      // 即计算dp[n][j][k] (j=0,1 k=0,1,2) 的和
  // 推导状态转移方程
      // i=0时 dp[0][0][0]=1 (满足j<2 k<3)
      // 第i天是P
          // 可以求得(A的数量是0,1  k的数量是0)的前i天的值,其他情况的前i天 由于不满足条件 因此是0(编程时初始化dp数组为0即可)
          // 前i-1天的A可以是0个,1个   结尾连续L的数量是0个,或1个,或2个
          // dp[i][j][0]=dp[i-1][j][k]  (对j=0,1  k=0,1,2求和)
      // 第i天是A
          // 可以求得(A的数量是1，k数量是0)的前i天的值，其他情况的前i天 由于不满足条件 因此是0(编程时初始化dp数组为0即可)
          // 前i-1天A的数量只能是0
          // dp[i][1][0]=dp[i-1][0][k] (对k=0,1,2求和)
      // 第i天是L
          // 可以求得(A的数量是0,1  k的数量是1,2)的前i天的值，其他情况的前i天 由于不满足条件 因此是0(编程时初始化dp数组为0即可)
          // 前i-1天的A可以是0个,或1个   结尾连续L的数量是0个,或1个
          // dp[i][j][k]=dp[i-1][j][k-1] (对j=0,1   k=1,2求和)

  // 实际编码过程中注意每次累加  要取余

  const MOD=1000000007
  const dp=new Array(n+1).fill(0).map(i=>new Array(2).fill(0).map(i=>new Array(3).fill(0)))
  dp[0][0][0]=1
  for(let i=1;i<=n;i++){
      // P
      for(let j=0;j<=1;j++){
          for(let k=0;k<=2;k++){
              dp[i][j][0]=(dp[i][j][0]+dp[i-1][j][k])%MOD
          }
      }
      // A
      for(let k=0;k<=2;k++){
          dp[i][1][0]=(dp[i][1][0]+dp[i-1][0][k])%MOD
      }
      // L
      for(let j=0;j<=1;j++){
          for(let k=1;k<=2;k++){
              dp[i][j][k]=(dp[i][j][k]+dp[i-1][j][k-1])%MOD
          }
      }
  }

  let ret=0
  for(let j=0;j<=1;j++){
      for(let k=0;k<=2;k++){
          ret=(ret+dp[n][j][k])%MOD
      }
  }
  return ret
};


// 官方题解还有一种  矩阵快速幂 算法
// 是在以上状态规划的基础上，将j和k合二为一  再推导状态
// 我的大脑告诉我 它暂时不想吸收...
// @lc code=end

